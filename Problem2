class Solution {
    public int[] nextGreaterElements(int[] nums) {
        if(nums == null || nums.length == 0){
            return new int[]{};
        }
        Stack<Integer> s = new Stack<>();
        int n = nums.length;
        int[] result = new int[n];
        //Using stack, add index of nums till the next greater num
        for(int i = 0; i < n; i++){
            //replace the greater num in popped index and curr index to stack
            while(!s.isEmpty() && nums[s.peek()] < nums[i]){
                int j = s.pop();
                result[j] = nums[i];
            }
            s.add(i);
        }
        //as this circular integer, repeat same for next iteration to find any greater num before the index
        for(int i = 0; i < n; i++){
            while(!s.isEmpty() && nums[s.peek()] < nums[i]){
                int j = s.pop();
                result[j] = nums[i];
            }
        }
        while(!s.isEmpty()){
            int j = s.pop();
            result[j] = -1;
        }
        return result;
    }
}
